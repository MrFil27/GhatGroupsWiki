{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ChatGroups NOVIT\u00c0 \u00c8 in uscita una nuova versione del plugin Phones , unisciti al nostro server Discord per rimanere sintonizzato su tutte le novit\u00e0 di questo e di altri plugin di nostra produzione. Indice Home Introduzione Compatibilit\u00e0 Configurazioni Comandi Integrazione API Introduzione ChatGroups \u00e8 un plugin progettato per semplificare la gestione di gruppi di chat all'interno di ambienti Minecraft e tuttavia compatibile con tutti i tipi di server a singola istanza (Paper/Purpur/Spigot ...). Inoltre il plugin offre anche un'API intuitiva e ben documentata. ChatGroups \u00e8 distribuito come progetto OpenSource, tuttavia puoi scaricarlo gratuitamente e modificarlo a tuo piacimento. Puoi trovare il codice sorgente facendo riferimento a questo link . Incoraggiamo gli utenti a segnalare ulteriori bug o richiedere supporto aprendo un ticket presso il nostro server Discord . Non contattarci privatamente, NON forniamo alcuna assistenza privata. Compatibilit\u00e0 Il plugin supporta server Purpur, Paper, Spigot o altre simili varianti che funzionano a singola istanza a partire dalla versione 1.16.5 alla versione pi\u00f9 recente, versioni precedenti a quelle fornite potrebbero provocare degli errori. NOTA: tendiamo a precisare che forniamo assistenza sul plugin solamente per le versioni supportate.","title":"Home"},{"location":"#chatgroups","text":"","title":"ChatGroups"},{"location":"#novita","text":"\u00c8 in uscita una nuova versione del plugin Phones , unisciti al nostro server Discord per rimanere sintonizzato su tutte le novit\u00e0 di questo e di altri plugin di nostra produzione.","title":"NOVIT\u00c0"},{"location":"#indice","text":"Home Introduzione Compatibilit\u00e0 Configurazioni Comandi Integrazione API","title":"Indice"},{"location":"#introduzione","text":"ChatGroups \u00e8 un plugin progettato per semplificare la gestione di gruppi di chat all'interno di ambienti Minecraft e tuttavia compatibile con tutti i tipi di server a singola istanza (Paper/Purpur/Spigot ...). Inoltre il plugin offre anche un'API intuitiva e ben documentata. ChatGroups \u00e8 distribuito come progetto OpenSource, tuttavia puoi scaricarlo gratuitamente e modificarlo a tuo piacimento. Puoi trovare il codice sorgente facendo riferimento a questo link . Incoraggiamo gli utenti a segnalare ulteriori bug o richiedere supporto aprendo un ticket presso il nostro server Discord . Non contattarci privatamente, NON forniamo alcuna assistenza privata.","title":"Introduzione"},{"location":"#compatibilita","text":"Il plugin supporta server Purpur, Paper, Spigot o altre simili varianti che funzionano a singola istanza a partire dalla versione 1.16.5 alla versione pi\u00f9 recente, versioni precedenti a quelle fornite potrebbero provocare degli errori. NOTA: tendiamo a precisare che forniamo assistenza sul plugin solamente per le versioni supportate.","title":"Compatibilit\u00e0"},{"location":"api/","text":"Integrazione dell'API L\u2019API del nostro plugin \u00e8 stata progettata per offrire agli sviluppatori un modo semplice e sicuro per interagire con le sue funzionalit\u00e0 principali, estendere il comportamento della chat e integrarsi con altri sistemi o plugin personalizzati. Per semplificare l\u2019inclusione nel proprio progetto, l\u2019API \u00e8 resa disponibile come dipendenza esterna facilmente integrabile nei pi\u00f9 comuni sistemi di build. Dipendenza Di seguito vengono riportate le istruzioni per importare correttamente la dipendenza nel proprio ambiente di sviluppo: Usando Maven : <repositories> <repository> <id>jitpack.io</id> <url>https://jitpack.io</url> </repository> </repositories> <dependency> <groupId>com.github.MrFil27</groupId> <artifactId>ChatGroups</artifactId> <version>1.2.4</version> </dependency> Usando Gradle (Kotlin DSL o Groovy) : dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { mavenCentral() maven { url 'https://jitpack.io' } } } dependencies { implementation 'com.github.MrFil27:ChatGroups:1.2.4' } Istanza dell'API Per accedere ai metodi dell\u2019API, \u00e8 sufficiente creare un\u2019istanza della classe Control, che implementa l\u2019interfaccia ChatGroupsAPI: package com.example.plugin; import org.bukkit.plugin.java.JavaPlugin; import org.bukkit.entity.Player; import com.mrfil27.chatgroups.api.ChatGroupsAPI; import com.mrfil27.chatgroups.api.Control; public final class ExamplePlugin extends JavaPlugin { private ChatGroupsAPI chatGroupsAPI; @Override public void onEnable() { // Inizializza l'istanza dell'API this.chatGroupsAPI = new Control(); getLogger().info(\"ChatGroups API inizializzata con successo!\"); } public ChatGroupsAPI getChatGroupsAPI() { return chatGroupsAPI; } } Controllo chat attiva A questo punto, puoi utilizzare getChatGroupsAPI() per accedere ai metodi dell\u2019API da altre classi del tuo plugin. Possiamo ad esempio controllare se il player ha una chat attiva: Player player = ...; if(chatGroupsAPI.hasActiveChat(player)){ player.sendMessage(\"Sei gi\u00e0 in una chat attiva!\"); }else{ player.sendMessage(\"Non sei in nessuna chat attiva.\"); } Questo \u00e8 utile per controllare lo stato del giocatore prima di eseguire determinate azioni, come l\u2019invio di messaggi o la creazione di nuovi gruppi. Utilizzare l'ActionManager La classe ActionManager fornisce metodi per gestire le azioni di comunicazione: ActionManager actionManager = chatGroupsAPI.getActionManager(); // Esempio: invia un messaggio gridato actionManager.scream(player, \"Attenzione a tutti!\"); // Esempio: invia un messaggio sussurrato actionManager.whisper(player, \"Ehi, questo \u00e8 un messaggio privato.\"); // Esegue un comando o un\u2019azione associata actionManager.executeCommand(player, \"Saluta Steve\"); NOTA: executeCommane() non esegue alcun comado, tale metodo stampa in chat un'azione eseguita dal player, equivalente al comando /azione <messaggio> . Utilizzare ChatGroupManager Ia classe ChatGroupManager permette di creare e amministrare gruppi di chat: ChatGroupManager groupManager = chatGroupsAPI.getGroupManager(); // Crea un nuovo gruppo groupManager.create(\"TeamAlpha\", player); // Aggiunge un membro al gruppo groupManager.addMember(\"TeamAlpha\", anotherPlayer); // Rimuove un membro groupManager.removeMember(\"TeamAlpha\", anotherPlayer); // Aggiunge un nuovo proprietario groupManager.addOwner(\"TeamAlpha\", adminPlayer); // Attiva o disattiva la chat di gruppo per un giocatore groupManager.toggle(\"TeamAlpha\", player);","title":"API"},{"location":"api/#integrazione-dellapi","text":"L\u2019API del nostro plugin \u00e8 stata progettata per offrire agli sviluppatori un modo semplice e sicuro per interagire con le sue funzionalit\u00e0 principali, estendere il comportamento della chat e integrarsi con altri sistemi o plugin personalizzati. Per semplificare l\u2019inclusione nel proprio progetto, l\u2019API \u00e8 resa disponibile come dipendenza esterna facilmente integrabile nei pi\u00f9 comuni sistemi di build.","title":"Integrazione dell'API"},{"location":"api/#dipendenza","text":"Di seguito vengono riportate le istruzioni per importare correttamente la dipendenza nel proprio ambiente di sviluppo: Usando Maven : <repositories> <repository> <id>jitpack.io</id> <url>https://jitpack.io</url> </repository> </repositories> <dependency> <groupId>com.github.MrFil27</groupId> <artifactId>ChatGroups</artifactId> <version>1.2.4</version> </dependency> Usando Gradle (Kotlin DSL o Groovy) : dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { mavenCentral() maven { url 'https://jitpack.io' } } } dependencies { implementation 'com.github.MrFil27:ChatGroups:1.2.4' }","title":"Dipendenza"},{"location":"api/#istanza-dellapi","text":"Per accedere ai metodi dell\u2019API, \u00e8 sufficiente creare un\u2019istanza della classe Control, che implementa l\u2019interfaccia ChatGroupsAPI: package com.example.plugin; import org.bukkit.plugin.java.JavaPlugin; import org.bukkit.entity.Player; import com.mrfil27.chatgroups.api.ChatGroupsAPI; import com.mrfil27.chatgroups.api.Control; public final class ExamplePlugin extends JavaPlugin { private ChatGroupsAPI chatGroupsAPI; @Override public void onEnable() { // Inizializza l'istanza dell'API this.chatGroupsAPI = new Control(); getLogger().info(\"ChatGroups API inizializzata con successo!\"); } public ChatGroupsAPI getChatGroupsAPI() { return chatGroupsAPI; } }","title":"Istanza dell'API"},{"location":"api/#controllo-chat-attiva","text":"A questo punto, puoi utilizzare getChatGroupsAPI() per accedere ai metodi dell\u2019API da altre classi del tuo plugin. Possiamo ad esempio controllare se il player ha una chat attiva: Player player = ...; if(chatGroupsAPI.hasActiveChat(player)){ player.sendMessage(\"Sei gi\u00e0 in una chat attiva!\"); }else{ player.sendMessage(\"Non sei in nessuna chat attiva.\"); } Questo \u00e8 utile per controllare lo stato del giocatore prima di eseguire determinate azioni, come l\u2019invio di messaggi o la creazione di nuovi gruppi.","title":"Controllo chat attiva"},{"location":"api/#utilizzare-lactionmanager","text":"La classe ActionManager fornisce metodi per gestire le azioni di comunicazione: ActionManager actionManager = chatGroupsAPI.getActionManager(); // Esempio: invia un messaggio gridato actionManager.scream(player, \"Attenzione a tutti!\"); // Esempio: invia un messaggio sussurrato actionManager.whisper(player, \"Ehi, questo \u00e8 un messaggio privato.\"); // Esegue un comando o un\u2019azione associata actionManager.executeCommand(player, \"Saluta Steve\"); NOTA: executeCommane() non esegue alcun comado, tale metodo stampa in chat un'azione eseguita dal player, equivalente al comando /azione <messaggio> .","title":"Utilizzare l'ActionManager"},{"location":"api/#utilizzare-chatgroupmanager","text":"Ia classe ChatGroupManager permette di creare e amministrare gruppi di chat: ChatGroupManager groupManager = chatGroupsAPI.getGroupManager(); // Crea un nuovo gruppo groupManager.create(\"TeamAlpha\", player); // Aggiunge un membro al gruppo groupManager.addMember(\"TeamAlpha\", anotherPlayer); // Rimuove un membro groupManager.removeMember(\"TeamAlpha\", anotherPlayer); // Aggiunge un nuovo proprietario groupManager.addOwner(\"TeamAlpha\", adminPlayer); // Attiva o disattiva la chat di gruppo per un giocatore groupManager.toggle(\"TeamAlpha\", player);","title":"Utilizzare ChatGroupManager"},{"location":"commands/","text":"Comandi ChatGroups Sottocomandi I comandi di ChatGroups hanno come prefisso di default \"chatggorup\", tuttavia \u00e8 stato aggiunto un alias che facilit\u00e0 e velocizza l'uso dei comandi. Puoi anche usare direttamente il comando /cg help per ottenere un supporto pi\u00f9 rapido direttamente nel tuo server. /cg help (permessi: cg.admin , cg.use ): fornisce una lista di tutti i comandi citati in questa guida /cg create <name> <owner> (permessi: cg.admin ): creer\u00e0 una nuova chat, aggiorner\u00e0 di conseguenza anche il file di configurazione. /cg addmember <group> <player> (permessi: cg.admin , cg.use ): aggiunge un membro alla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo membro potr\u00e0 parlare in tale chat. /cg addowner <group> <player> (permessi: cg.admin , cg.owner ): aggiunge un owner alla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo owner potr\u00e0 gestire e parlare in tale chat. /cg removemember <group> <player> (permessi: cg.admin , cg.use ): rimuove un membro dalla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo membro non potr\u00e0 pi\u00f9 parlare in tale chat. /cg removeowner <group> <player> (permessi: cg.admin , cg.owner ): rimuove un owner dalla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo owner non potr\u00e0 pi\u00f9 gestire e parlare in tale chat. /cg toggle <group> (permessi: nessuno): permette al giocatore di attivare la chat indicata; dal momento di esecuzione tutti i messaggi del player verranno inviato in tale chat, per disattivare l'esecuzione rieseguire nuovamente il comando. /cg reload (permessi: cg.admin ): Ricarica il file di configurazione e applicher\u00e0 le modifiche effettaute in esso. Messaggio rapido \u00c8 possibile scrivere in una chat senza la necessit\u00e0 di dover eseguire il sottocomando toggle : /message <group> <message> o /msg <group> <message> (permessi: nessuno) Azioni Il plugin supporta 3 tipi di azioni riportate precedentemente dalla configurazione: /azione <string> , /action <string> o /a <string> (permessi: nesusno): simula un'azione eseguita dal player a una distanza definita dalla configurazione. /urlo <string> o /scream <string> (permessi: nesusno): invia un messaggio a una distanza definita dalla configurazione; per mantenere la realisticit\u00e0 del plugin, impostare un raggio maggiore rispetto a chat-radius . /bisbiglio <string> , /bisbiglia <string> o /whisper <string> (permessi: nesusno): invia un messaggio a una distanza definita dalla configurazione; per mantenere la realisticit\u00e0 del plugin, impostare un raggio minore rispetto a chat-radius .","title":"Comandi"},{"location":"commands/#comandi-chatgroups","text":"","title":"Comandi ChatGroups"},{"location":"commands/#sottocomandi","text":"I comandi di ChatGroups hanno come prefisso di default \"chatggorup\", tuttavia \u00e8 stato aggiunto un alias che facilit\u00e0 e velocizza l'uso dei comandi. Puoi anche usare direttamente il comando /cg help per ottenere un supporto pi\u00f9 rapido direttamente nel tuo server. /cg help (permessi: cg.admin , cg.use ): fornisce una lista di tutti i comandi citati in questa guida /cg create <name> <owner> (permessi: cg.admin ): creer\u00e0 una nuova chat, aggiorner\u00e0 di conseguenza anche il file di configurazione. /cg addmember <group> <player> (permessi: cg.admin , cg.use ): aggiunge un membro alla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo membro potr\u00e0 parlare in tale chat. /cg addowner <group> <player> (permessi: cg.admin , cg.owner ): aggiunge un owner alla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo owner potr\u00e0 gestire e parlare in tale chat. /cg removemember <group> <player> (permessi: cg.admin , cg.use ): rimuove un membro dalla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo membro non potr\u00e0 pi\u00f9 parlare in tale chat. /cg removeowner <group> <player> (permessi: cg.admin , cg.owner ): rimuove un owner dalla chat indicata, aggiorner\u00e0 di conseguenza anche il file di configurazione; il nuovo owner non potr\u00e0 pi\u00f9 gestire e parlare in tale chat. /cg toggle <group> (permessi: nessuno): permette al giocatore di attivare la chat indicata; dal momento di esecuzione tutti i messaggi del player verranno inviato in tale chat, per disattivare l'esecuzione rieseguire nuovamente il comando. /cg reload (permessi: cg.admin ): Ricarica il file di configurazione e applicher\u00e0 le modifiche effettaute in esso.","title":"Sottocomandi"},{"location":"commands/#messaggio-rapido","text":"\u00c8 possibile scrivere in una chat senza la necessit\u00e0 di dover eseguire il sottocomando toggle : /message <group> <message> o /msg <group> <message> (permessi: nessuno)","title":"Messaggio rapido"},{"location":"commands/#azioni","text":"Il plugin supporta 3 tipi di azioni riportate precedentemente dalla configurazione: /azione <string> , /action <string> o /a <string> (permessi: nesusno): simula un'azione eseguita dal player a una distanza definita dalla configurazione. /urlo <string> o /scream <string> (permessi: nesusno): invia un messaggio a una distanza definita dalla configurazione; per mantenere la realisticit\u00e0 del plugin, impostare un raggio maggiore rispetto a chat-radius . /bisbiglio <string> , /bisbiglia <string> o /whisper <string> (permessi: nesusno): invia un messaggio a una distanza definita dalla configurazione; per mantenere la realisticit\u00e0 del plugin, impostare un raggio minore rispetto a chat-radius .","title":"Azioni"},{"location":"configurations/","text":"Configurazione Al primo avvio del plugin verr\u00e0 creata la cartella per la configurazione di alcuni dati (ChatGroups/config.yml): chat-radius: 10 default-prefixes: action: prefix: \"&6&lAzione &f%player-name% &8\u00bb &7\" radius: 10 scream: prefix: \"&b&lURLO &f%player-name% &8\u00bb &7\" radius: 20 whisper: prefix: \"&a&lBISBIGLIO &8\u00bb\" radius: 1 groups: global: members: [] chat-radius: 10 : specifica il raggio massimo per consentire la comunicazione con i player nella chat globale, \u00e8 possibile volerlo disattivare modificando tale impostazione a 0 (vale per tutti i radius di questo config). default-prefixes : output dei comandi, \u00e8 possibile modificarli a proprio piacimento. groups : questa sezione \u00e8 automatica (non editarla manualmente); si aggiorner\u00e0 durante l'uso dei comandi che permettono di applicare tali modifiche. NOTA: all'ingresso del player verr\u00e0 automaticamente registrato nella chat globale.","title":"Configurazioni"},{"location":"configurations/#configurazione","text":"Al primo avvio del plugin verr\u00e0 creata la cartella per la configurazione di alcuni dati (ChatGroups/config.yml): chat-radius: 10 default-prefixes: action: prefix: \"&6&lAzione &f%player-name% &8\u00bb &7\" radius: 10 scream: prefix: \"&b&lURLO &f%player-name% &8\u00bb &7\" radius: 20 whisper: prefix: \"&a&lBISBIGLIO &8\u00bb\" radius: 1 groups: global: members: [] chat-radius: 10 : specifica il raggio massimo per consentire la comunicazione con i player nella chat globale, \u00e8 possibile volerlo disattivare modificando tale impostazione a 0 (vale per tutti i radius di questo config). default-prefixes : output dei comandi, \u00e8 possibile modificarli a proprio piacimento. groups : questa sezione \u00e8 automatica (non editarla manualmente); si aggiorner\u00e0 durante l'uso dei comandi che permettono di applicare tali modifiche. NOTA: all'ingresso del player verr\u00e0 automaticamente registrato nella chat globale.","title":"Configurazione"}]}